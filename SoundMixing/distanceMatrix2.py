import itertools
import matplotlib.pyplot as plt
import numpy as np

_CLASSES = ['Car', 'Chair', 'ClearThroat', 'CoffeeMachine', 'Conversation', 'Coughing', 'Dishwasher', 'DoorKnock', 'DoorSlam', 'Drawer', 'FallingObject', 'FootSteps', 'Keyboard',
           'Laughing', 'MilkSteamer', 'PhoneRinging', 'Photocopier', 'Sink', 'Sneezing', 'Stiring']

conf_matrix = [[0.0,5.4,6.8,3.8,6.2,7.3,6.5,9.7,4.5,5.0,6.8,7.5,8.5,7.0,7.3,10.2,4.8,6.9,7.2,8.4],
[5.4,0.0,5.0,4.2,6.5,8.4,5.2,13.0,5.9,7.7,8.2,10.7,13.0,6.8,5.8,10.5,6.4,10.5,6.5,10.1],
[6.8,5.0,0.0,5.3,7.4,7.9,7.0,13.8,6.5,8.0,8.0,10.7,12.5,6.8,7.0,10.3,7.1,9.8,6.4,10.0],
[3.8,4.2,5.3,0.0,5.6,7.7,4.6,11.2,4.6,5.5,6.6,8.3,9.7,7.1,7.7,11.7,3.7,6.1,7.1,8.8],
[6.2,6.5,7.4,5.6,0.0,4.4,7.7,8.3,4.1,3.8,4.9,6.6,8.5,5.7,10.7,9.0,3.5,7.2,3.8,7.6],
[7.3,8.4,7.9,7.7,4.4,0.0,10.0,9.4,5.7,5.0,4.6,6.7,7.0,5.6,8.2,6.1,5.6,4.5,3.2,4.8],
[6.5,5.2,7.0,4.6,7.7,10.0,0.0,12.6,6.6,7.8,9.7,10.4,12.9,10.1,8.4,14.7,6.4,8.4,10.1,11.8],
[9.7,13.0,13.8,11.2,8.3,9.4,12.6,0.0,8.1,6.9,9.2,5.1,6.0,12.1,14.4,11.5,8.5,8.3,9.8,8.3],
[4.5,5.9,6.5,4.6,4.1,5.7,6.6,8.1,0.0,4.1,5.4,5.6,8.5,7.4,8.4,9.4,3.6,6.3,6.1,7.1],
[5.0,7.7,8.0,5.5,3.8,5.0,7.8,6.9,4.1,0.0,4.8,4.4,7.7,6.9,9.4,8.4,3.6,4.8,5.1,6.1],
[6.8,8.2,8.0,6.6,4.9,4.6,9.7,9.2,5.4,4.8,0.0,5.9,6.8,5.9,8.7,6.8,4.8,4.5,4.0,4.7],
[7.5,10.7,10.7,8.3,6.6,6.7,10.4,5.1,5.6,4.4,5.9,0.0,5.3,9.3,13.0,9.1,6.7,8.8,7.2,5.8],
[8.5,13.0,12.5,9.7,8.5,7.0,12.9,6.0,8.5,7.7,6.8,5.3,0.0,9.9,11.9,8.5,7.9,7.8,7.3,5.5],
[7.0,6.8,6.8,7.1,5.7,5.6,10.1,12.1,7.4,6.9,5.9,9.3,9.9,0.0,7.1,7.1,6.0,7.5,4.2,7.4],
[7.3,5.8,7.0,7.7,10.7,8.2,8.4,14.4,8.4,9.4,8.7,13.0,11.9,7.1,0.0,10.7,9.6,8.6,8.1,10.3],
[10.2,10.5,10.3,11.7,9.0,6.1,14.7,11.5,9.4,8.4,6.8,9.1,8.5,7.1,10.7,0.0,9.6,9.5,5.6,6.2],
[4.8,6.4,7.1,3.7,3.5,5.6,6.4,8.5,3.6,3.6,4.8,6.7,7.9,6.0,9.6,9.6,0.0,6.5,5.4,6.6],
[6.9,10.5,9.8,6.1,7.2,4.5,8.4,8.3,6.3,4.8,4.5,8.8,7.8,7.5,8.6,9.5,6.5,0.0,4.9,5.3],
[7.2,6.5,6.4,7.1,3.8,3.2,10.1,9.8,6.1,5.1,4.0,7.2,7.3,4.2,8.1,5.6,5.4,4.9,0.0,5.0],
[8.4,10.1,10.0,8.8,7.6,4.8,11.8,8.3,7.1,6.1,4.7,5.8,5.5,7.4,10.3,6.2,6.6,5.3,5.0,0.0]]

conf_matrix = [[100.0,63.2,54.0,74.3,57.8,50.2,55.6,33.8,69.3,65.8,53.7,49.2,42.1,52.3,50.0,30.7,67.3,53.4,51.0,43.0],
[63.2,100.0,65.8,71.5,55.8,42.6,64.4,11.7,59.9,47.8,44.1,27.5,11.6,53.7,60.8,28.7,56.5,28.6,56.0,31.2],
[54.0,65.8,100.0,63.9,49.7,46.3,52.5,6.3,55.5,45.5,45.8,27.0,15.0,54.1,52.4,29.9,51.5,33.3,56.4,31.8],
[74.3,71.5,63.9,100.0,62.0,47.9,68.7,24.2,68.9,62.6,54.9,43.8,34.2,52.0,47.6,20.8,74.9,58.5,51.6,40.0],
[57.8,55.8,49.7,62.0,100.0,69.8,47.8,43.6,71.9,74.1,67.0,55.0,42.2,61.0,27.6,38.8,76.0,50.9,74.4,48.3],
[50.2,42.6,46.3,47.9,69.8,100.0,31.9,36.3,61.4,66.0,68.8,54.8,52.3,62.2,44.2,58.3,61.7,69.7,77.9,67.1],
[55.6,64.4,52.5,68.7,47.8,31.9,100.0,14.6,55.0,47.0,34.3,29.6,12.4,31.2,42.8,0.0,56.6,42.9,31.6,19.9],
[33.8,11.7,6.3,24.2,43.6,36.3,14.6,100.0,45.1,52.9,37.8,65.2,59.1,18.0,2.2,22.0,42.5,43.4,33.7,43.8],
[69.3,59.9,55.5,68.9,71.9,61.4,55.0,45.1,100.0,72.1,63.4,61.8,42.1,49.9,43.1,36.1,75.5,57.3,58.4,51.6],
[65.8,47.8,45.5,62.6,74.1,66.0,47.0,52.9,72.1,100.0,67.1,70.0,47.9,53.1,36.0,42.7,75.8,67.4,65.4,58.5],
[53.7,44.1,45.8,54.9,67.0,68.8,34.3,37.8,63.4,67.1,100.0,60.2,53.5,59.6,41.2,53.5,67.5,69.3,72.9,67.7],
[49.2,27.5,27.0,43.8,55.0,54.8,29.6,65.2,61.8,70.0,60.2,100.0,64.1,36.9,11.3,38.4,54.4,40.3,51.4,60.2],
[42.1,11.6,15.0,34.2,42.2,52.3,12.4,59.1,42.1,47.9,53.5,64.1,100.0,32.6,19.1,42.0,46.6,47.1,50.6,62.5],
[52.3,53.7,54.1,52.0,61.0,62.2,31.2,18.0,49.9,53.1,59.6,36.9,32.6,100.0,51.7,51.5,59.1,49.2,71.2,49.7],
[50.0,60.8,52.4,47.6,27.6,44.2,42.8,2.2,43.1,36.0,41.2,11.3,19.1,51.7,100.0,27.5,34.4,41.7,44.8,29.7],
[30.7,28.7,29.9,20.8,38.8,58.3,0.0,22.0,36.1,42.7,53.5,38.4,42.0,51.5,27.5,100.0,35.0,35.7,62.2,57.6],
[67.3,56.5,51.5,74.9,76.0,61.7,56.6,42.5,75.5,75.8,67.5,54.4,46.6,59.1,34.4,35.0,100.0,56.0,63.3,54.8],
[53.4,28.6,33.3,58.5,50.9,69.7,42.9,43.4,57.3,67.4,69.3,40.3,47.1,49.2,41.7,35.7,56.0,100.0,66.5,63.7],
[51.0,56.0,56.4,51.6,74.4,77.9,31.6,33.7,58.4,65.4,72.9,51.4,50.6,71.2,44.8,62.2,63.3,66.5,100.0,65.8],
[43.0,31.2,31.8,40.0,48.3,67.1,19.9,43.8,51.6,58.5,67.7,60.2,62.5,49.7,29.7,57.6,54.8,63.7,65.8,100.0]]

conf_matrix = np.array(conf_matrix)
print(conf_matrix)
normalise = True
if normalise:
    conf_matrix = 1 - (conf_matrix.astype('float') / 100)  # / conf_matrix.sum(axis=1)[:, np.newaxis]
plt.imshow(conf_matrix, interpolation='nearest', cmap=plt.cm.Blues, aspect='auto')
plt.colorbar()
tick_marks = np.arange(len(_CLASSES))
plt.xticks(tick_marks, _CLASSES, fontsize=14, rotation=70)
plt.yticks(tick_marks, _CLASSES, fontsize=14, va='center')
fmt = '.2f' if normalise else 'd'
thresh = conf_matrix.max() / 2.
for i, j in itertools.product(range(conf_matrix.shape[0]), range(conf_matrix.shape[1])):
    plt.text(j, i, format(conf_matrix[i, j], fmt),
             horizontalalignment="center", verticalalignment="center", fontsize=12,
             color="white" if conf_matrix[i, j] > thresh else "black")
plt.ylabel('Profile 1', fontsize=22)
plt.xlabel('Profile 2', fontsize=22)
#plt.title('Distance Matrix', fontsize=30)
plt.show()